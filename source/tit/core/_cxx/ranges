/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ *\
 * Part of BlueTit Solver, licensed under Apache 2.0 with Commons Clause.
 * Commercial use, including SaaS, requires a separate license, see /LICENSE.md
\* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#pragma once
#pragma GCC system_header

#ifndef Q_MOC_RUN

#include_next <ranges>
#include <tuple>
#include <type_traits>
#include <utility>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#ifdef _LIBCPP_VERSION

#include_next <functional>

_LIBCPP_BEGIN_NAMESPACE_STD
namespace ranges::views {

// C++23 feature, missing in libc++ 20.1.6.
template<class D>
  requires is_object_v<D> && same_as<D, remove_cv_t<D>>
using range_adaptor_closure = __range_adaptor_closure<D>;

// C++23 feature, missing in libc++ 20.1.6.
struct _AsConst final : range_adaptor_closure<_AsConst> {
  template<viewable_range Range>
  constexpr auto operator()(Range&& range) const noexcept {
    if constexpr (std::is_lvalue_reference_v<range_value_t<Range>>) {
      return all(forward<Range>(range)) |
             transform([]<class Elem>(Elem&& elem) -> decltype(auto) {
               return as_const(forward<Elem>(elem));
             });
    } else {
      return all(forward<Range>(range));
    }
  }
};
inline constexpr _AsConst as_const{};

// C++23 feature, missing in libc++ 20.1.6.
struct _Enumerate final : range_adaptor_closure<_Enumerate> {
  template<viewable_range Range>
  constexpr auto operator()(Range&& range) const noexcept {
    if constexpr (sized_range<Range>) {
      return zip(iota(0UZ, size(range)), forward<Range>(range));
    } else {
      return zip(iota(0UZ), forward<Range>(range));
    }
  }
};
inline constexpr _Enumerate enumerate{};

// C++23 feature, missing in libc++ 20.1.6.
// Note: our implementation is limited to sized random access ranges.
struct _Chunk final {
  template<viewable_range Range>
    requires sized_range<Range> && random_access_range<Range>
  constexpr auto operator()(Range&& range, size_t chunk_size) const noexcept {
    const auto range_size = size(range);
    return iota(0UZ, (range_size + chunk_size - 1) / chunk_size) |
           transform([view = all(forward<Range>(range)),
                      range_size,
                      chunk_size](size_t chunk_index) {
             return subrange(
                 begin(view) + min(range_size, chunk_index * chunk_size),
                 begin(view) + min(range_size, (chunk_index + 1) * chunk_size));
           });
  }
  constexpr auto operator()(size_t chunk_size) const noexcept {
    return __pipeable(bind_back(*this, chunk_size));
  }
};
inline constexpr _Chunk chunk{};

// C++23 feature, missing in libc++ 20.1.6.
// Note: our implementation is limited to sized random access ranges.
template<size_t N>
struct _Adjacent final : range_adaptor_closure<_Adjacent<N>> {
  template<viewable_range Range>
    requires sized_range<Range> && random_access_range<Range>
  constexpr auto operator()(Range&& range) const noexcept {
    const auto range_size = size(range);
    return iota(0UZ, range_size >= N ? range_size - N + 1UZ : 0UZ) |
           transform([view = all(forward<Range>(range))](size_t index) {
             return [&]<size_t... Is>(index_sequence<Is...> /*indices*/) {
               return tuple(begin(view)[index + Is]...);
             }(make_index_sequence<N>{});
           });
  }
};
template<size_t N>
inline constexpr _Adjacent<N> adjacent{};
inline constexpr auto pairwise = adjacent<2>;

// C++23 feature, missing in libc++ 20.1.6.
// Note: our implementation is limited to sized random access ranges.
template<size_t N>
struct _AdjacentTransform final {
  template<viewable_range Range>
    requires sized_range<Range> && random_access_range<Range>
  constexpr auto operator()(Range&& range, auto func) const {
    return adjacent<N>(forward<Range>(range)) |
           transform([func = std::move(func)]<class Tuple>(Tuple&& items) {
             return apply(func, forward<Tuple>(items));
           });
  }
  constexpr auto operator()(auto func) const noexcept {
    return __pipeable(bind_back(*this, std::move(func)));
  }
};
template<size_t N>
inline constexpr _AdjacentTransform<N> adjacent_transform{};
inline constexpr auto pairwise_transform = adjacent_transform<2>;

// C++23 feature, missing in libc++ 20.1.6.
// Note: our implementation is limited to sized random access ranges.
struct _CartesianProduct final {
  template<viewable_range... Ranges>
    requires ((sized_range<Ranges> && random_access_range<Ranges>) && ...)
  constexpr auto operator()(Ranges&&... ranges) const noexcept {
    return iota(0UZ, (size(ranges) * ...)) |
           transform([views = tuple{all(forward<Ranges>(ranges))...}](
                         size_t flat_index) {
             return [&]<size_t... Axes>(index_sequence<Axes...> /*axes*/) {
               return [&]<size_t... RAxes>(index_sequence<RAxes...> /*raxes*/) {
                 const tuple sizes{size(get<Axes>(views))...};
                 const tuple indices{
                     (exchange(flat_index, flat_index / get<RAxes>(sizes)) %
                      get<RAxes>(sizes))...};
                 return tuple(get<Axes>(views)[get<RAxes>(indices)]...);
               }(index_sequence<(sizeof...(Ranges) - 1 - Axes)...>{});
             }(make_index_sequence<sizeof...(Ranges)>{});
           });
  }
};
inline constexpr _CartesianProduct cartesian_product{};

} // namespace ranges::views
_LIBCPP_END_NAMESPACE_STD
#endif // ifdef _LIBCPP_VERSION

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#ifdef _LIBCPP_VERSION
_LIBCPP_BEGIN_NAMESPACE_STD
#elifdef __GLIBCXX__
namespace std _GLIBCXX_VISIBILITY(default) {
_GLIBCXX_BEGIN_NAMESPACE_VERSION
#endif
namespace ranges::views {

// C++26 feature.
struct _Concat final {
  template<viewable_range... Ranges>
    requires ((sized_range<Ranges> && random_access_range<Ranges>) && ...)
  constexpr auto operator()(Ranges&&... ranges) const {
    using Result = common_type_t<range_value_t<Ranges>...>;
    return iota(0UZ, (size(ranges) + ...)) |
           transform([views = tuple{all(forward<Ranges>(ranges))...}](
                         size_t index) -> Result {
             return [&]<size_t Axis>(this auto&& self) -> Result {
               if (const auto axis_size = size(get<Axis>(views));
                   index < axis_size) {
                 return get<Axis>(views)[index];
               } else if constexpr (Axis + 1 < sizeof...(Ranges)) {
                 index -= axis_size;
                 return self.template operator()<Axis + 1>();
               } else {
                 throw out_of_range("Index out of bounds in concat view");
               }
             }.template operator()<0>();
           });
  }
};
inline constexpr _Concat concat{};

} // namespace ranges::views
#ifdef _LIBCPP_VERSION
_LIBCPP_END_NAMESPACE_STD
#elifdef __GLIBCXX__
_GLIBCXX_END_NAMESPACE_VERSION
} // namespace std _GLIBCXX_VISIBILITY(default)
#endif

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#endif // ifndef Q_MOC_RUN
