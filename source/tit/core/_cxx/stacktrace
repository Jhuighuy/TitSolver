/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ *\
 * Part of BlueTit Solver, licensed under Apache 2.0 with Commons Clause.
 * Commercial use, including SaaS, requires a separate license, see /LICENSE.md
\* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#pragma once
#pragma GCC system_header

#ifndef Q_MOC_RUN

#include <format>
#include <ranges>

#define BOOST_STACKTRACE_GNU_SOURCE_NOT_REQUIRED
#include <boost/stacktrace/stacktrace.hpp>

#ifdef _LIBCPP_VERSION
_LIBCPP_BEGIN_NAMESPACE_STD
#elifdef __GLIBCXX__
namespace std _GLIBCXX_VISIBILITY(default) {
_GLIBCXX_BEGIN_NAMESPACE_VERSION
#endif

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// C++23 feature, missing in libc++ 20.1.6,
// partially missing in libstdc++ 15.1.0 (macOS).
struct stacktrace final : public boost::stacktrace::stacktrace {
  using boost::stacktrace::stacktrace::stacktrace;
  [[gnu::always_inline]] static auto current() noexcept -> stacktrace {
    return {};
  }
};

// C++23 feature, missing in libc++ 20.1.6,
// partially missing in libstdc++ 15.1.0 (macOS)
template<>
struct formatter<stacktrace> {
  static constexpr auto parse(const format_parse_context& context) {
    return context.begin();
  }
  static auto format(const stacktrace& stacktrace, format_context& context) {
    auto out = context.out();
    for (const auto& [i, frame] : views::enumerate(stacktrace)) {
      out = format_to(out, "{:>3} {} {}\n", i, frame.address(), frame.name());
    }
    return out;
  }
};

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#ifdef _LIBCPP_VERSION
_LIBCPP_END_NAMESPACE_STD
#elifdef __GLIBCXX__
_GLIBCXX_END_NAMESPACE_VERSION
} // namespace std _GLIBCXX_VISIBILITY(default)
#endif

#endif // ifndef Q_MOC_RUN
