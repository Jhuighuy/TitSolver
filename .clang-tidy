# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Part of the Tit Solver project, under the MIT License.
# See /LICENSE.md for license information. SPDX-License-Identifier: MIT
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Enable almost all non-vendor-specific checks.
#
# Rational on disabled checks:
#
# * bugprone-easily-swappable-parameters:
#   There are many easily-swappable parameters in the solver code, we cannot
#   avoid that without introducing structures almost for any function.
#
# * cert-dcl58-cpp:
#   This checks threats specializations of `std::` classes as modifying the
#   standard library.
#
# * cert-msc32-c, cert-msc51-cpp:
#   Those are crypography-related. We are not doing anything that requires
#   any level of sequerity right now.
#
# * clang-analyzer-optin.core.EnumCastOutOfRange:
#   To be re-enabled in the future, once there is a better support for flag
#   enums.
#
# * cppcoreguidelines-avoid-do-while:
#   Doctest uses do-while loops in it's assert macros. Apart from that, the
#   check is definitely useful.
#
# * cppcoreguidelines-avoid-magic-numbers, readability-magic-numbers:
#   We have a few, I would like to re-enable this check in the future.
#
# * cppcoreguidelines-avoid-non-const-global-variables
#   We have a few of those, and I do not want to wrap them into `//NOLINT`
#   everytime. Also this check does not recognize `thread_local` variables,
#   that are also considered global.
#
# * cppcoreguidelines-macro-usage:
#   Macros are part of the language, I am not feeling bad about using them.
#
# * cppcoreguidelines-misleading-capture-default-by-value:
#   Maybe reconsider this one.
#
# * cppcoreguidelines-pro-bounds-constant-array-index:
#   This check does not works correctly with our asserts.
#
# * misc-no-recursion:
#   We need recusion is some in templated recurred lambdas.
#
# * modernize-use-nodiscard:
#   I do not want to put `[[nodiscard]]` everywhere, especially on functions
#   like `size()`. I want to use `[[nodiscard]]` only when it is really needed,
#   like memory allocation functions or system calls.
#
# * readability-avoid-unconditional-preprocessor-if:
#   In my opinion, using `#if 0/#endif` is more readable and convenient than
#   using `/*` and `*/`.
#
# * readability-braces-around-statements:
#   I do not like braces around short single-line statements.
#
# * readability-function-cognitive-complexity:
#   This check does not works correctly with doctest macros.
#
# * readability-identifier-length:
#   We have a lot of short identifiers, since we are doing a lot of math.
Checks: |
  bugprone-*
  -bugprone-easily-swappable-parameters
  cert-*
  -cert-dcl58-cpp
  -cert-msc32-c
  -cert-msc51-cpp
  -clang-analyzer-optin.core.EnumCastOutOfRange
  concurrency-*
  cppcoreguidelines-*
  -cppcoreguidelines-avoid-do-while
  -cppcoreguidelines-avoid-magic-numbers
  -cppcoreguidelines-avoid-non-const-global-variables
  -cppcoreguidelines-macro-usage
  -cppcoreguidelines-misleading-capture-default-by-value
  -cppcoreguidelines-pro-bounds-constant-array-index
  misc-*
  -misc-no-recursion
  modernize-*
  -modernize-use-nodiscard
  performance-*
  readability-*
  -readability-avoid-unconditional-preprocessor-if
  -readability-braces-around-statements
  -readability-function-cognitive-complexity
  -readability-identifier-length
  -readability-magic-numbers

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Treat all warning as errors.
WarningsAsErrors: |
  *

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
