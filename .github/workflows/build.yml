# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Part of the Tit Solver project, under the MIT License.
# See /LICENSE.md for license information. SPDX-License-Identifier: MIT
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

name: Build

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Cancel previous runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

jobs:

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  build_ubuntu:
    name: Ubuntu

    strategy:
      matrix:
        compiler: [g++-14]
        configuration: [Debug, Release]
      fail-fast: false

    runs-on: ubuntu-latest
    container:
      image: jhuighuy/tit-solver-base:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fix repository ownership
        run: |
          git config --global --add safe.directory '*'

      - name: Build and test
        run: |
          # Build and test
          ./build/build.sh -j 4                                                \
            --compiler ${{ matrix.compiler }}                                  \
            --config ${{ matrix.configuration }}                               \
            --test

      - name: Upload test output
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-output-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.configuration }}
          path: output/test_output

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  build_macos:
    name: macOS

    strategy:
      matrix:
        compiler: [g++-14]
        configuration: [Debug, Release]
      fail-fast: false

    runs-on: macos-latest

    env:
      CXX: ${{ matrix.compiler }}
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
      PIP_BREAK_SYSTEM_PACKAGES: 1
      VCPKG_ROOT: /Users/Shared/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: /Users/Shared/vcpkg_cache

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install packages and tools
        run: |
          # Install packages and tools
          ## Fetch fresh packages, but do not upgrade them automatically.
          brew update -q
          ## Install the toolchain.
          brew install -q cmake
          brew install -q gcc@14 || true # Might fail for unknown reason.
          ## Install LLVM.
          brew install -q llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          ## Install miscellaneous tools.
          brew install -q gnu-sed diffutils
          pip3 install --user --upgrade codespell

      - name: Install vcpkg
        run: |
          # Install vcpkg
          git clone --depth=1 https://github.com/microsoft/vcpkg.git $VCPKG_ROOT
          $VCPKG_ROOT/bootstrap-vcpkg.sh

      - name: Restore vcpkg packages cache
        id: vcpkg-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}/installed
            ${{ env.VCPKG_ROOT }}/buildtrees
            ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          # Use the run ID as the cache key, this way the cache is updated
          # after each run.
          key: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ github.run_id }}
          restore-keys: vcpkg-${{ runner.os }}-${{ matrix.compiler }}

      - name: Install vcpkg packages
        run: |
          # Install vcpkg packages
          mkdir -p $VCPKG_DEFAULT_BINARY_CACHE || true
          $VCPKG_ROOT/vcpkg install

      - name: Update vcpkg packages cache
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}/installed
            ${{ env.VCPKG_ROOT }}/buildtrees
            ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: ${{ steps.vcpkg-cache-restore.outputs.cache-primary-key }}

      - name: Build and test
        run: |
          # Build and test
          ./build/build.sh -j 4                                                \
            --compiler ${{ matrix.compiler }}                                  \
            --config ${{ matrix.configuration }}                               \
            --test

      - name: Upload test output
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-output-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.configuration }}
          path: output/test_output

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
