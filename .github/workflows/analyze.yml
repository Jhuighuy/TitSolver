# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Part of the Tit Solver project, under the MIT License.
# See /LICENSE.md for license information. SPDX-License-Identifier: MIT
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

name: Analyze

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

jobs:

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  analyze_sonar:
    name: Analyze
    runs-on: ubuntu-latest
    container:
      image: jhuighuy/tit-solver-base:latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        compiler: [g++-13]
        configuration: [Coverage]
    env:
      # Coverage report file path (Sonar for the future).
      SONAR_COVERAGE_REPORT_PATH: sonar_coverage.xml
      CODECOV_COVERAGE_REPORT_PATH: codecov_coverage.xml
      # Directory where build-wrapper output will be placed.
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
    steps:

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Build and test
        run: |
          # Build and test
          ## Temporary fix for 'fatal: detected dubious ownership...'
          git config --global --add safe.directory '*'
          ## Run the build script with the build-wrapper.
          build-wrapper-linux-x86-64                                           \
            --out-dir "${{ env.BUILD_WRAPPER_OUT_DIR }}"                       \
            ./build/build.sh -j 4                                              \
              --compiler=${{ matrix.compiler }}                                \
              --config=${{ matrix.configuration }}                             \
              --test

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Collect coverage reports
        run: |
          # Collect coverage reports
          ## Setup the actual `gcov` executable path.
          GCOV_EXE="${{ matrix.compiler }}"
          GCOV_EXE="${GCOV_EXE/g++/gcov}"
          ## See reasons for using `--exclude-...` and `--decisions` below:
          ## https://www.gcovr.com/en/stable/faq.html#why-does-c-code-have-so-many-uncovered-branches
          gcovr                                                                \
            --exclude "output/.*" --exclude "tests/.*" --exclude ".*\.test.*"  \
            --gcov-executable "$GCOV_EXE"                                      \
            --exclude-unreachable-branches                                     \
            --exclude-throw-branches                                           \
            --decisions                                                        \
            --xml "${{ env.CODECOV_COVERAGE_REPORT_PATH }}"                    \
            --sonarqube "${{ env.SONAR_COVERAGE_REPORT_PATH }}"

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Upload test output
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-output-${{ runner.os }}-${{ matrix.compiler }}-Coverage
          path: output/test_output

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.CODECOV_COVERAGE_REPORT_PATH }}

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner                                                                    \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.coverageReportPaths="${{ env.SONAR_COVERAGE_REPORT_PATH }}"

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
