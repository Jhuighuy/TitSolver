# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Part of BlueTit Solver, under the MIT License.
# See /LICENSE.md for license information. SPDX-License-Identifier: MIT
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

name: Analyze

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

# Cancel previous runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze

    strategy:
      matrix:
        os: [ubuntu-24.04]
        compiler: [GCC]
        configuration: [Coverage]

    runs-on: ${{ matrix.os }}

    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
      CXX_COVERAGE_REPORT_PATH_CODECOV: cxx_coverage_codecov.xml
      CXX_COVERAGE_REPORT_PATH_SONAR: cxx_coverage_sonar.xml
      JS_COVERAGE_REPORT_PATH: source/titfront/coverage/lcov.info
      PYTHON_COVERAGE_REPORT_PATH: python_coverage.xml

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch all history for proper analysis and coverage reports.
          fetch-depth: 0

      - name: Setup Sonar Scanner
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: Setup runner
        uses: ./.github/actions/setup_runner
        with:
          compiler: ${{ matrix.compiler }}

      - name: Setup vcpkg
        uses: ./.github/actions/setup_vcpkg

      - name: Build
        run: |
          build-wrapper-linux-x86-64                                           \
            --out-dir "${{ env.BUILD_WRAPPER_OUT_DIR }}"                       \
            ./build/build.sh --force --config ${{ matrix.configuration }}

      - name: Run tests
        run: ./build/test.sh

      - name: Collect coverage reports
        run: |
          # Generate C++ coverage report.
          gcovr                                                                \
            --gcov-executable "${CC/gcc/gcov}"                                 \
            --exclude "output/.*"                                              \
            --exclude "tests/.*"                                               \
            --exclude ".*\.test.*"                                             \
            --exclude-unreachable-branches                                     \
            --exclude-throw-branches                                           \
            --xml "${{ env.CXX_COVERAGE_REPORT_PATH_CODECOV }}"                \
            --sonarqube "${{ env.CXX_COVERAGE_REPORT_PATH_SONAR }}"

          # Generate Python coverage report.
          find output/test_output -name ".coverage" | xargs coverage combine
          coverage xml                                                         \
            -o "${{ env.PYTHON_COVERAGE_REPORT_PATH }}"                        \
            --omit "*/tests/*"

      - name: Upload test output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-output-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.configuration }}
          path: output/test_output

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          slug: Jhuighuy/TitSolver
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.CXX_COVERAGE_REPORT_PATH_CODECOV }},${{ env.JS_COVERAGE_REPORT_PATH }},${{ env.PYTHON_COVERAGE_REPORT_PATH }}
          disable_search: true

      - name: Run Sonar Scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner                                                                    \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.coverageReportPaths="${{ env.CXX_COVERAGE_REPORT_PATH_SONAR }}" \
            --define sonar.javascript.lcov.reportPaths="${{ env.JS_COVERAGE_REPORT_PATH }}"\
            --define sonar.python.coverage.reportPaths="${{ env.PYTHON_COVERAGE_REPORT_PATH }}"
