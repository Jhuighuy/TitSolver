# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Part of the Tit Solver project, under the MIT License.
# See /LICENSE.md for license information. SPDX-License-Identifier: MIT
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

name: Analyze

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Cancel previous runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

jobs:

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  analyze:
    name: Analyze

    strategy:
      matrix:
        compiler: [g++-14]
        configuration: [Coverage]

    runs-on: ubuntu-latest
    container:
      image: jhuighuy/tit-solver-base:latest

    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
      CODECOV_COVERAGE_REPORT_PATH: codecov_coverage.xml
      SONAR_COVERAGE_REPORT_PATH: sonar_coverage.xml

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch all history for proper analysis and coverage reports.
          fetch-depth: 0

      - name: Install Sonar Scanner
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: Fix repository ownership
        run: |
          git config --global --add safe.directory '*'

      - name: Build and test
        run: |
          # Build and test
          build-wrapper-linux-x86-64                                           \
            --out-dir "${{ env.BUILD_WRAPPER_OUT_DIR }}"                       \
            ./build/build.sh -j 4                                              \
              --compiler ${{ matrix.compiler }}                                \
              --config ${{ matrix.configuration }}                             \
              --force                                                          \
              --test

      - name: Collect coverage reports
        run: |
          # Collect coverage reports
          ## Setup the actual `gcov` executable path.
          GCOV_EXE="${{ matrix.compiler }}"
          GCOV_EXE="${GCOV_EXE/g++/gcov}"
          ## See rational for using `--exclude-...` below:
          ## https://www.gcovr.com/en/stable/faq.html#why-does-c-code-have-so-many-uncovered-branches
          gcovr                                                                \
            --exclude "output/.*" --exclude "tests/.*" --exclude ".*\.test.*"  \
            --gcov-executable "$GCOV_EXE"                                      \
            --exclude-unreachable-branches                                     \
            --exclude-throw-branches                                           \
            --xml "${{ env.CODECOV_COVERAGE_REPORT_PATH }}"                    \
            --sonarqube "${{ env.SONAR_COVERAGE_REPORT_PATH }}"

      - name: Upload test output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-output-${{ runner.os }}-${{ matrix.compiler }}-Coverage
          path: output/test_output

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.CODECOV_COVERAGE_REPORT_PATH }}
          disable_search: true

      - name: Run Sonar Scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner                                                                    \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.coverageReportPaths="${{ env.SONAR_COVERAGE_REPORT_PATH }}"

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
